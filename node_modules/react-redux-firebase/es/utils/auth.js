'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLoginMethodAndParams = exports.createAuthProvider = undefined;

var _isFunction2 = require('lodash/isFunction');

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _isString2 = require('lodash/isString');

var _isString3 = _interopRequireDefault(_isString2);

var _isArray2 = require('lodash/isArray');

var _isArray3 = _interopRequireDefault(_isArray2);

var _capitalize2 = require('lodash/capitalize');

var _capitalize3 = _interopRequireDefault(_capitalize2);

var _constants = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var createAuthProvider = exports.createAuthProvider = function createAuthProvider(firebase, providerName, scopes) {
  if (_constants.supportedAuthProviders.indexOf(providerName.toLowerCase()) === -1) {
    throw new Error(providerName + ' is not a valid Auth Provider');
  }

  var provider = new firebase.auth[(0, _capitalize3.default)(providerName) + 'AuthProvider']();

  if (firebase._.config.customAuthParameters && firebase._.config.customAuthParameters[providerName]) {
    provider.setCustomParameters(firebase._.config.customAuthParameters[providerName]);
  }

  if (providerName.toLowerCase() === 'twitter' || !(0, _isFunction3.default)(provider.addScope)) {
    return provider;
  }

  provider.addScope('email');

  if (scopes) {
    if ((0, _isArray3.default)(scopes)) {
      scopes.forEach(function (scope) {
        provider.addScope(scope);
      });
    }
    if ((0, _isString3.default)(scopes)) {
      provider.addScope(scopes);
    }
  }

  return provider;
};

var getLoginMethodAndParams = exports.getLoginMethodAndParams = function getLoginMethodAndParams(firebase, _ref) {
  var email = _ref.email,
      password = _ref.password,
      provider = _ref.provider,
      type = _ref.type,
      token = _ref.token,
      scopes = _ref.scopes,
      credential = _ref.credential;

  if (credential) {
    return { method: 'signInWithCredential', params: [credential] };
  }
  if (provider) {
    if (token) {
      console.warn('Provider + Token combination is deprecated and will be removed from the next major version. Use credential parameter.');
      return { method: 'signInWithCredential', params: [provider, token] };
    }
    var authProvider = createAuthProvider(firebase, provider, scopes);
    if (type === 'popup') {
      return { method: 'signInWithPopup', params: [authProvider] };
    }
    return { method: 'signInWithRedirect', params: [authProvider] };
  }
  if (token) {
    return { method: 'signInWithCustomToken', params: [token] };
  }
  return { method: 'signInWithEmailAndPassword', params: [email, password] };
};